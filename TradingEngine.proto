syntax = "proto3";
package trading_engine;
import "google/protobuf/empty.proto";

enum TradingEngineOrderGrpType{
    Market = 0;
    Stop = 1;
    Limit = 2;
}

enum TradingEngineGrpcError{
    AccountNotFound = 0;
    DayOff = 1;
    ReceiverAccountNotFound = 2;
    TradingGroupNotFound = 3;
    AssetPairTradingSettingsNotFound = 4;
    NotEnoughBalance = 5;
    InvalidBalanceTransferAmount = 6;
    AssetPairPriceNotFound = 7;
    CommissionPriceNotFound = 8;
    MarginPriceNotFound = 9;
    AssetPairNotFound = 10;
    ProfitPriceNotFound = 11;
    AccountTradingDisabled = 12;
    NoLiquidity = 13;
    InvalidSl = 14;
    InvalidTp = 15;
    PositionNotFound = 16;
    InvalidOrderPartialExecutionQuantity = 17;
    TradingInstrumentSettingsNotFound = 18;
    OperationNotSupportForThisOrderType = 19;
    OrderNotFound = 20;
    InvalidCollateral = 21;
    AccountDuplicate = 22;
    InvalidLeverage = 23;
    CollateralNotFoundInGroupSettings = 24;
    TradingAccountSettingsNotFound = 25;
    LotsTooLow = 26;
    LotsTooHigh = 27;
    InvalidDesirePrice = 28;
}

message TradingEngineOrderGrpcModel{
    string Id = 1;
    string TraderId = 2;
    string AccountId = 3;
    string AssetPair = 4;
    string Collateral = 5;
    double LotsAmount = 6;
    bool IsBuy = 7;
    optional double SlPrice = 8;
    optional double TpPrice = 9;
    map<string, string> Metadata = 10;
    TradingEngineOrderGrpType OrderType = 11;

    int64 CreateDate = 12;
    int64 UpdateData = 13;

    string CreateProcessId = 14;
    string LastUpdateProcessId = 15;

    optional double DesirePrice = 16;
}


message TradingEnginePlaceOrderGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string AssetPair = 3;
    double LotsAmount = 5;
    bool IsBuy = 6;
    optional double SlPrice = 7;
    optional double TpPrice = 8;
    map<string, string> Metadata = 9;
    TradingEngineOrderGrpType OrderType = 10;
    optional double DesirePrice = 11;
    string ProcessId = 12;
}

message PlaceOrderGrpcResponse{
    oneof PlaceOrderGrpcResponseResult{
        TradingEngineOrderGrpcModel Order = 1;
        TradingEngineGrpcError ErrorMessage = 2;
    }
}

message TradingEngineGetAccountOrdersGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

message TradingEngineCancelOrderGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string OrderId = 3;
}

message CancelOrderGrpcResponse{
    oneof CancelOrderGrpcResponseResult{
        TradingEngineOrderGrpcModel Order = 1;
        TradingEngineGrpcError ErrorMessage = 2;
    }
}


service TradingEngineService{
    rpc GetAllOrders(google.protobuf.Empty) returns (stream TradingEngineOrderGrpcModel);
    rpc PlaceOrder(TradingEnginePlaceOrderGrpcRequest) returns (PlaceOrderGrpcResponse);
    rpc GetAccountOrders(TradingEngineGetAccountOrdersGrpcRequest) returns (stream TradingEngineOrderGrpcModel);
    rpc CancelOrder(TradingEngineCancelOrderGrpcRequest) returns (CancelOrderGrpcResponse);

}