syntax = "proto3";
package trading_engine_persistence;

import "google/protobuf/empty.proto";

message TradingEngineTradePersistenceGrpcModel {
  string Id = 1;
  string TraderId = 2;
  string AccountId = 3;
  string AssetPair = 4;
  string OrderId = 5;
  string PositionId = 6;
  double Price = 7;
  double Pl = 8;
  double Fee = 9;
  double LotsAmount = 10;
  int64 CreateDate = 11;
  string CreateProcessId = 12;
  bool IsBuy = 13;
}

message TradingEngineBidAskGrpcModel {
  string AssetPair = 1;
  double Bid = 2;
  double Ask = 3;
  int64 Date = 4;
}

message TradingEnginePositionSwap {
  double Amount = 1;
  int64 Date = 2;
}

message TradingEnginePositionPersistenceGrpcModel {
  string Id = 1;
  string TraderId = 2;
  string AccountId = 3;
  string AssetPair = 4;
  string Collateral = 5;
  double LotsAmount = 6;
  bool IsBuy = 7;
  bool IsAbook = 8;
  optional double SlPrice = 9;
  optional double TpPrice = 10;

  map<string, string> Metadata = 11;

  optional string OrderId = 12;

  TradingEngineBidAskGrpcModel MarginBidask = 13;
  TradingEngineBidAskGrpcModel OpenBidask = 14;
  TradingEngineBidAskGrpcModel ProfitBidask = 15;
  TradingEngineBidAskGrpcModel ActiveBidask = 16;

  double Commission = 17;
  double Pl = 18;

  repeated TradingEnginePositionSwap Swaps = 19;

  int64 CreateDate = 20;
  int64 UpdateDate = 21;

  string CreateProcessId = 22;
  string UpdateProcessId = 23;
}

enum OrderType {
  Market = 0;
  Limit = 1;
  Stop = 2;
}

enum PositionStatus {
  Pending = 0;
  Canceled = 1;
  Executed = 2;
  Rejected = 3;
}

message TradingEngineOrderPersistenceGrpcModel {
  string Id = 1;
  string TraderId = 2;
  string AccountId = 3;
  string AssetPair = 4;
  string Collateral = 5;
  double LotsAmount = 6;
  bool IsBuy = 7;
  bool IsAbook = 8;

  optional double SlPrice = 9;
  optional double TpPrice = 10;

  map<string, string> Metadata = 11;

  OrderType OrderType = 12;
  PositionStatus PositionStatus = 13;

  int64 CreateDate = 14;
  int64 UpdateDate = 15;

  string CreateProcessId = 16;
  string UpdateProcessId = 17;

  optional double DesiredPrice = 18;
}

enum TradingAccountStatus {
  Active = 0;
  Disabled = 1;
  Archived = 2;
}

enum TradingAccountHedgeMode {
  Netting = 0;
  Hedging = 1;
}



message TradingEngineAccountPersistenceGrpcModel {
  string Id = 1;
  string TraderId = 2;
  string Currency = 3;
  double Balance = 4;
  double Leverage = 5;
  string TradingGroup = 6;

  int64 CreateDate = 7;
  int64 LastUpdateDate = 8;
  string LastUpdateProcessId = 9;

  map<string, string> Metadata = 10;

  TradingAccountStatus Status = 11;
  TradingAccountHedgeMode HedgeMode = 12;
}

message GetOrdersFilterRequest {
  PositionStatus status = 1;
}


service CrossMarginEnginePersistenceService {
  rpc GetAllPositions(google.protobuf.Empty) returns (stream TradingEnginePositionPersistenceGrpcModel);
  rpc GetAllTrades(google.protobuf.Empty) returns (stream TradingEngineTradePersistenceGrpcModel);
  rpc GetAllOrders(GetOrdersFilterRequest) returns (stream TradingEngineOrderPersistenceGrpcModel);
  rpc GetAllAccounts(google.protobuf.Empty) returns (stream TradingEngineAccountPersistenceGrpcModel);
  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}